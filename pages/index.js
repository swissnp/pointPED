import Head from "next/head";
import NavBar from "@/components/NavBar";
import { useState, useRef, use } from "react";
import {getP50weight,adjustedWeight}  from "@/components/calculation";
import MultiSelectSearchBox from "@/components/MultiSelectSearchBox";
import SexSelectBox from "@/components/SexSelectBox";
import drug from "@/components/data";

const calculateWeight = (w, h, s) => {
  if (w > 0) {
    if (w>1.2*getP50weight(h, s)){
      console.log("overweight");
      let TBW = w;
      let IBW = getP50weight(h, s);
      let ABW = adjustedWeight(w, h);
      console.log(TBW, IBW, ABW);
      return [TBW, IBW, ABW]
    }else{
      console.log("normal weight");
      return w;
    }
  } else {
    getP50weight(h, s);
    return getP50weight(h, s);
  }
}

const validateWeight = (weight) => {
  if ((weight >= 0 || weight === '' || (/^[0-9\b]+$/.test(e.target.value))) & (weight <= 500)) {
  return true;
  } 
  return false;
}

const validateHeight = (weight) => {
  if ((weight >= 0 || weight === '' || (/^[0-9\b]+$/.test(e.target.value))) & (weight <= 300)) {
  return true;
  } 
  return false;
}

const calculate_drug = (weight, height, sex, selectedDrug) => {
  console.log(selectedDrug)
  let calculatedWeight = calculateWeight(weight,height,sex)
  if (calculatedWeight.length>1){
    let TBW = calculatedWeight[0];
    let IBW = calculatedWeight[1];
    let ABW = calculatedWeight[2];
  }
  else {
    for (let i = 0; i < selectedDrug.length; i++) {
      dose = selectedDrug[i].coef * calculatedWeight;
      console.log(dose, selectedDrug[i].label)
    }
}
};

export default function Home() {
  const [weight, setWeight] = useState('');
  const [height, setHeight] = useState('');
  const [selectedDrug, setSelectedDrug] = useState([]);
  const [sex, setSex] = useState('');
  let isWeightValid = useRef(true);
  let isHeightValid = useRef(true);

  isWeightValid = validateWeight(weight);
  isHeightValid = validateHeight(height);
  
  let handleChange = (selectedOption) => {
    setSelectedDrug(selectedOption);
  };
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="min-h-screen bg-base-200">
          <NavBar />
          <div className="mx-3 my-5">
            <div className="container mx-auto max-w-screen-md rounded-lg bg-base-100 px-6 py-2 text-base-content drop-shadow-md">
              <div className="prose-lg p-3 text-center font-bold lg:prose-xl">
                <h1>Select Drug</h1>
              </div>
              <p className="text-center text-error">
                demo version don't use in real setting
              </p>
              <label className="label">
                  <span className="label-text">Drugs</span>
              </label>
              <MultiSelectSearchBox onChange ={e => handleChange(e)} />
              <div className="form-control w-auto ">
                <label className="label">
                  <span className="label-text">Weight (kg)</span>
                  {isWeightValid
                  ? <span className="label-text-alt"></span>
                  : <span className="label-text-alt text-error">Weight is invalid</span>}
                </label>
                <input
                  type="number"
                  // ref={weightRef}
                  placeholder="Type here"
                  className={` input-bordered input w-full ${!(isWeightValid) && "input-error"} `}
                  pattern="[0-9]*"
                  value={weight}
                  // inputProps={{ inputMode: 'decimal' }}
                  inputmode="decimal"
                  onChange={(e) =>
                    setWeight((weight) => (e.target.validity.valid ? e.target.value : weight))}
                />
              </div>
              <div className="form-control w-auto ">
                <label className="label">
                  <span className="label-text">Height (cm)</span>
                  {isHeightValid
                  ? <span className="label-text-alt"></span>
                  : <span className="label-text-alt text-error">Height is invalid</span>}
                </label>
                <input
                  type="number"
                  // ref={weightRef}
                  placeholder="Type here"
                  className={` input-bordered input w-full ${!(isHeightValid) && "input-error"} `}
                  pattern="[0-9]*"
                  value={height}
                  // inputProps={{ inputMode: 'decimal' }}
                  inputmode="decimal"
                  onChange={(e) =>
                    setHeight((height) => (e.target.validity.valid ? e.target.value : height))}
                />
              </div>
              <label className="label">
                  <span className="label-text">Select Sex</span>
              </label>
              <SexSelectBox onChange={(e) => setSex(e.label)}/>
              <div className=" flex items-center justify-center gap-x-6 pt-3">
                <button className="btn-primary btn" onClick={e=>console.log('g')}>Button</button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
